package exercise1;

import java.sql.SQLException;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 * @file PlayerController.java
 * @author Kevin Ma | #: 300867968
 * @date December 9, 2016
 * @version 0.5.5 implemented 'Add a Player' functionality
 * @description This class defines the behaviors of the Player view for this
 *              application at a micro level.
 */

public class PlayerController extends OnlineGameTrackerController {

	// PUBLIC METHODS
	// =============================================================================================
	/**
	 * Returns all records in the Player table as an ObservableList
	 */
	@Override
	public ObservableList<PlayerModel> selectAll() {
		// temp variables
		ObservableList<PlayerModel> playerList;
		PlayerModel playerRecord;

		playerList = FXCollections.observableArrayList();

		try {
			db.pst = db.conn.prepareStatement("select * from [COMP228-F2016-OnlineGameTracker].[dbo].[Player];");
			db.rs = db.pst.executeQuery();
			while (db.rs.next()) {
				playerRecord = new PlayerModel(db.rs.getInt(1)); // player id
				playerRecord.setFirstName(db.rs.getString(2));
				playerRecord.setLastName(db.rs.getString(3));
				playerRecord.setAddress(db.rs.getString(4));
				playerRecord.setPostalCode(db.rs.getString(5));
				playerRecord.setProvince(db.rs.getString(6));
				playerRecord.setPhoneNumber(db.rs.getString(7));
				playerList.add(playerRecord);
			}
			return playerList;
		} catch (SQLException e) {
			return null;
		}
	}

	/**
	 * Checks the Player table to see if a record with the parameters already
	 * exists.
	 * 
	 * @param fName
	 *            the first name of the player
	 * @param lName
	 *            the last name of the player
	 * @param address
	 *            the address of the player
	 * @param pcode
	 *            the postal code of the player
	 * @param prov
	 *            the province the player is living at
	 * @param phone
	 *            the telephone number of the player
	 * @return true if a player record is found with the parameter details,
	 *         false otherwise
	 */
	private boolean checkIfAPlayerExists(String fName, String lName, String address, String pcode, String prov,
			String phone) {
		try {
			db.pst = db.conn.prepareStatement(
					"select * from [COMP228-F2016-OnlineGameTracker].[dbo].[Player] where first_name = ? and last_name = ? and address = ? and postal_code = ? and province = ? and phone_number = ?");
			db.pst.setString(1, fName);
			db.pst.setString(2, lName);
			db.pst.setString(3, address);
			db.pst.setString(4, pcode);
			db.pst.setString(5, prov);
			db.pst.setString(6, phone);
			db.rs = db.pst.executeQuery();
			while (db.rs.next()) {
				return true;
			}
			return false;
		} catch (SQLException e) {
			return false;
		}
	}

	/**
	 * Inserts a row into the Player table. The player_id is auto generated by a
	 * sequence, and the data for the other six columns are taken from the
	 * parameters. All players must be unique in the table.
	 * 
	 * @param fName
	 *            the first name of the player
	 * @param lName
	 *            the last name of the player
	 * @param address
	 *            the address of the player
	 * @param pcode
	 *            the postal code of the player
	 * @param prov
	 *            the province the player is living at
	 * @param phone
	 *            the telephone number of the player
	 * @return true if the insert was successful, false otherwise
	 */
	public boolean insertIntoPlayer(String fName, String lName, String address, String pcode, String prov,
			String phone) {
		try {
			if (!this.checkIfAPlayerExists(fName, lName, address, pcode, prov, phone)) {
				db.pst = db.conn.prepareStatement(
						"insert into [COMP228-F2016-OnlineGameTracker].[dbo].[Player] (first_name,last_name,address,postal_code,province,phone_number) values(?,?,?,?,?,?)");
				db.pst.setString(1, fName);
				db.pst.setString(2, lName);
				db.pst.setString(3, address);
				db.pst.setString(4, pcode);
				db.pst.setString(5, prov);
				db.pst.setString(6, phone);
				db.pst.executeUpdate();
				return true;
			}
			return false;
		} catch (Exception e) {
			return false;
		}
	}

}
